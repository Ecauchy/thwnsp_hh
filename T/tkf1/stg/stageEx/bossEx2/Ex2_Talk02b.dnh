#����e����[Single]
#ScriptVersion[3]
#Title["Ex�@�{�X��bB-2"]
#Text["Ex�@�{�X��bB-2"]
#Background[""]
#System["./../../../system/System_Main.dnh"]

//---------------------------------------------------------------------

// �֐���荞��
#include"./../../../lib/lib_boss.dnh"
#include"./../../../lib/lib_talk.dnh"


@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult( 0);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(-1);	}
	BossEvent();
}

@Initialize {
	Boss_Init();	//����ݒ�
	objEnemy  = CreateBossTalk(BOSS_ID_KAYANO);
	Obj_SetVisible(GetBossImageID(objEnemy), false);	//�摜��\��
	Task_Main();
}

@MainLoop {
	yield;

}

// ���C���^�X�N
task Task_Main()
{
	// ���@�w���Z�b�g
	BossEffect_ResetMagicCircle();

	// ��b����
	StartTalk();

	// �o�ꃂ�[�V�����i�ŏ��͔�\���j
	let xIni = CenX;
	let yIni = 140;
	wait(60);
	
	let resultSkilp = FuncTalk();
	
	// �J�ڂ��ւ���
	if (!resultSkilp)
	{
		if (GetPlayMode() == GAME_MAIN)
		{
			wait(30);
			Swich_Talk02B();
		}
		FinishTalk(true);
		wait(60);

		// ��b����
		StartTalk();

		FuncTalk2();
	}
	FinishTalk(true);
	//���̃V�[����
	Boss_Finalize(objEnemy, false, false);
}

// ��b����
function FuncTalk()
{
	// �I�u�W�F�N�g�쐬
	let cutinBoss3   = CreateTalkObjectEx(BOSS_ID_UKA, true, 128, -8);
	let cutinBoss2   = CreateTalkObjectEx(BOSS_ID_TENYU, true, 0, 0);
	let cutinBoss1   = CreateTalkObjectEx(BOSS_ID_KAYANO, true, -32, 0);
	let cutinPlayer1 = CreateTalkObject(BOSS_ID_MARISA, false);
	let cutinPlayer2 = CreateTalkObject(BOSS_ID_RINNE, false);
	let cutinDescri  = CreateDescriptiveObject();
	
	// �摜�t�@�C��
	let pathBoss1 = imgCharaKayano;
	let pathBoss2 = imgCharaTenyu;
	let pathBoss3 = imgCharaUka;
	let pathPlayer1 = imgCharaMarisa;
	let pathPlayer2 = imgCharaRinne;
	
	// �B��
	SetImageVisible(cutinBoss3, false);
	// �ŏ��ɑO�ɏo�Ă���L����
	SetImageFoward(cutinPlayer2, true);
	
	let resultSkilp = true;
	let cursorSkip = false;
	
	wait(15);
	
	let talkID = 0;
	loop
	{
		cursorSkip = false;
		let talkType = FuncTalkSingle(talkID);
		if (talkType == 0) { break; }
		if (cursorSkip) { talkID = max(0, talkID+1); }
		else { talkID = max(0, talkID+WaitNext()); }
	}
	return(resultSkilp);

	// ��b�����P���i�����߂����o����悤�Ɂj
	function FuncTalkSingle(talkID)
	{
		let xIni = CenX;
		let yIni = 140;
		
		let talk_type = 1;
		alternative(talkID)
		case(0)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinPlayer2, "姫、もう降参です！");
		}
		case(1)
		{

			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss2, "しかしえらい事をしたもんだな、白菊よ");
		}
		case(2)
		{
			SetImageVisible(cutinBoss3, false);
			SetImageVisible(cutinBoss2, true);
			
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinPlayer2, "でも、どうやって私がやった[r]って判ったんですか？");
		}
		case(3)
		{
			SetImageVisible(cutinBoss3, true);
			SetImageVisible(cutinBoss2, false);
			
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[4]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss3, "私が推理したのであります！");
		}
		case(4)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[4]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx(cutinPlayer2, "ば、馬鹿な…まさか羽日が…。");
		}
		case(5)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[4]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx(cutinPlayer2, "はっ、さては能力で異変に関わった[r]人数を割り出して！");
		}
		case(6)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[4]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss3, "へ？あ、その手が有ったであります！[r]これは不覚！");
		}
		case(7)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[4]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss3, "しかし言われた通り、中将閣下をよく[r]“観察”したでありますよ！");
		}
		case(8)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[5]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss1, "相変わらずの要領の悪さね。");
		}
		case(9)
		{
			ObjPrim_SetTexture(cutinBoss1,     pathBoss1[2]);
			ObjPrim_SetTexture(cutinBoss3,     pathBoss3[3]);
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx(cutinBoss1, "しかしこれだけの論理構築。[r]見事だったわ。");
		}
		case(10)
		{
			SetTalkEx(cutinDescri, "※注意[r]ここから推理会話文が流れますが、呆れる程長いです。");
		}
		case(11)
		{
			SetTalkEx(cutinDescri, "解決編をスキップしますか？");

			let tmp_res = SetChoiseWindow(72, 404, ["������", "�͂�"]);
			if (tmp_res == 1) { resultSkilp = true; }
			else { resultSkilp = false; }
			// ������������
			cursorSkip = true;
		}
		others
		{
			return(0);
		}
		return(talk_type);
	}
}

// ������
function FuncTalk2()
{
	// �I�u�W�F�N�g�쐬
	let cutinBoss3   = CreateTalkObjectEx(BOSS_ID_UKA, true, 92-256, -24-8);
	let cutinBoss2   = CreateTalkObjectEx(BOSS_ID_TENYU, true, -64-256, -24);
	let cutinBoss1   = CreateTalkObjectEx(BOSS_ID_KAYANO, true, 64-256, -24);
	let cutinPlayer1 = CreateTalkObjectEx(BOSS_ID_MARISA, false, -16, -24);
	let cutinPlayer2 = CreateTalkObjectEx(BOSS_ID_RINNE, false, 80, -24);
	let cutinDescri  = CreateDescriptiveObject_Umineko();
	
	Obj_SetValue(cutinBoss1, "BOSS_NAME", "����@���");
	Obj_SetValue(cutinBoss2, "BOSS_NAME", "�V�Y�����쁁��o");
	Obj_SetValue(cutinBoss3, "BOSS_NAME", "��~�@�H��");
	Obj_SetValue(cutinPlayer1, "BOSS_NAME", "���J�@������");
	Obj_SetValue(cutinPlayer2, "BOSS_NAME", "���e�����쁁�k");
	
	// �摜�t�@�C��
	let pathBoss1 = imgCharaKayano;
	let pathBoss2 = imgCharaTenyu;
	let pathBoss3 = imgCharaUka;
	let pathPlayer1 = imgCharaMarisa;
	let pathPlayer2 = imgCharaRinne;
	
	// �B��
	HideAllCutin();
	
	wait(15);
	
	let talkID = 0;
	loop
	{
		let talkType = FuncTalkSingle(talkID);
		if (talkType == 0) { break; }
		talkID = max(0, talkID+WaitNext());
	}

	// ��b�����P���i�����߂����o����悤�Ɂj
	function FuncTalkSingle(talkID)
	{
		let xIni = CenX;
		let yIni = 140;
		
		let talk_type = 1;
		alternative(talkID)
		case(0)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�o�����܂�����d��Ȃ��B[r]���������Đ����V���[�ƍs�������B");
		}
		case(1)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "���ʂ�");
		}
		case(2)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�܂����n�񂩂�ł���܂��I");
		}
		case(3)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�P��ڗ얲���[�g�i�ȉ��얲�P�j[r]�F�̂́A���q���ٕς̔Ɛl�Ƃ��Đ��s�����ƌ����Ă���̂ŁA���c�P�A�얲�P�̏��ł���܂��I");
		}
		case(4)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�������P�ł����q�́A���F�̂���P�����󂯂��ƌ����Ă邺�H[r]�Ƃ������́A���c�P�A�������P�̏����ȁB");
		}
		case(5)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "����ɁA�������P��1�ʂɂāA�J�i���o���͐��E���ٕς̔Ɛl�炵���l������P�����󂯂��ƌ����Ă���ȁB");
		}
		case(6)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "���̏��́A�얲�P�ɂē��q���J�i���o���ɏP�����ꂽ����m�点����ł���Ƃ������B[r]����āA���c�P�A�얲�P�A�������P�ƂȂ�B");
		}
		case(7)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�`�ʂ���ĂȂ������œ��q����񂪈����R�ɒʒB�����\���͖������ƍl����l������Ǝv�����ǁA");
		}
		case(8)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko_Red(cutinDescri, cutinBoss1, "�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�Ƃ����̂��~�X�e���[�̃��[���Ȃ̂�B",
				"�񎦂��ꂽ��񂵂��g������ʖ�");
		}
		case(9)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�j�S�ɋ߂����炱��̓q���g�U�ɏ����Ă������݂����ˁB");
		}
		case(10)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�P��ڂ͂��̎��n�񐄗�����ԓ�������ł���܂��ȁI[r]�ނ���Q��ڂ̕��n��͊ȒP�ł���܂��I");
		}
		case(11)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�������Q�ɂĒ����t�����ٕς������B[r]�얲�Q�͓r���ňٕω����B[r]���c�Q�͈ٕω�����ł���܂��I");
		}
		case(12)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko_Red(cutinDescri, cutinPlayer1, "���͔Ɛl�����B[r]�܂��얲�Q�ɂāA�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�@�����񎦂���Ă�ȁB",
				"�@�@�@�@�@�@�@�@[r]�@�@�@�@�@�@�@�@�����͓|���ꂽ��K���ٕς������Ȃ���΂Ȃ�Ȃ�");
		}
		case(13)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�P���ȏ����@�ł����΁A���q�ł������ɓ|���ꂽ��ٕς��J�n���邱�Ƃ͏o����󂾂��A�����Ŗ��ɂȂ�̂����@���ȁB");
		}
		case(14)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�܂����@�I�ɗL�蓾�Ȃ�����e�������炾�ȁB[r]���q�͊m���ɗ��_��|���ꂽ����ٕς��p���ł��邪�A���͎�����^�C�~���O���B");
		}
		case(15)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�F�̂����ȊO���Ɛl�ł���ꍇ�A�Ɛl�͊F�̂�����Ɛl�Ɏd���ďグ��ׂɂ��̃^�C�~���O�ňٕς��������̂�ˁH");
		}
		case(16)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�X�y���J�[�h���[���𗘗p�����g���b�N�ł���܂��ȁI");
		}
		case(17)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�|���ꂽ��ٕς������Ȃ���΂Ȃ�Ȃ��Ȃ�A�|���ꂽ�u�ԈӐ}�I�Ɉٕς��~�߂�΁A���l��Ɛl�Ɏd���ďグ�鎖���ł���ł���܂��I");
		}
		case(18)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�����Ȃ�ƁA���q���|���ꂽ�ォ��ٕς��X�^�[�g����Ƃ������Ȏ��ɂȂ�ȁB");
		}
		case(19)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�ٕς�������^�C�~���O�͂ǂ�����Ĕ��f����񂾁H");
		}
		case(20)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "���͂������茩�Ă����H[r]�K���Ɉٕς��~�߂���^�C�~���O����X�������H");
		}
		case(21)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "����A����͗L�蓾�Ȃ��B[r]���̂Ȃ�A�����̏��͒񎦂���Ă��Ȃ����炾�B");
		}
		case(22)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "��͂肻�́A�w�񎦂���Ă��Ȃ��x�Ƃ����T�O�͏d�v�����ˁB");
		}
		case(23)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�ƂȂ�ƁA�����������@�Ƃ��ẮA�񎦂��ꂽ�������g���Ȃ��̂Ȃ�");
		}
		case(24)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "���q�����́w�����������������x�ȊO�͓��@�Ƃ��ėL�蓾�Ȃ����ɂȂ��ˁB");
		}
		case(25)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�Ȃ�A�F�̂ɓ|���ꂽ��ٕς��J�n�����ꍇ�ǂ��ł���܂����H[r]���̊ԂɎ������s�����̂ł́H");
		}
		case(26)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�����Ȃ�Ɣ��e�ȊO�ٕς���p���Ȃ����A���e����p�����@����������B");
		}
		case(27)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "���e�ɂƂ��Ă͓��q��|�����炻��Ŏ蕿�Ȃ񂾂���ȁB");
		}
		case(28)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�F�̓a�ɓ|�����O�͂ǂ����H[r]���̊ԂɎ������s���A������F�̓a����p�����Ȃ�c");
		}
		case(29)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�F�̂���񂪓|���ꂽ���p���҂����Ȃ���B[r]�Ƃ������́A���q�����͂��������Ɛl�̉\���������Ȃ�����ˁB");
		}
		case(30)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "���ɊF�̂��Ɛl�̏ꍇ�ł���܂��I[r]�|���ꂽ����ٕς��p�����Ă���̂ŁA�����t���̊֗^���m�肵���ł���܂��I");
		}
		case(31)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�������҂Ă�H[r]�ǂ����̃^�C�~���O�ň�p���Ƃ��āA����������݂��ɔc������񂾁H");
		}
		case(32)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "���������F�̓a�Ɣ��e�͖������Q�܂ŉ���Ă��Ȃ��̂�����A����2�l�̊Ԃł̈�p���͕s�\�ł͂Ȃ����H");
		}
		case(33)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�ƂȂ�ƁA�c���Ă�͈ٕ̂ω����܂łɈ�x���|����Ė����V������񂾂����Ė��");
		}
		case(34)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "�҂��ĉ������I[r]����Ȃɒ񎦂��ꂽ���]�X�Ŏ���Ɛl�ɂ������Ȃ�A����������_������܂��I");
		}
		case(35)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "������������������͖{�҂ł͂����Ǝ��ƈꏏ�ɋ��āA���̃��[�g�Ɛړ_�����������͒񎦂���Ă܂���I");
		}
		case(36)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[4]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "�]���̃��[�g�̉�b�Ȃ�Ė��������񂪔c���ł��鍪���������񂾂���A�؋��ɂȂ�Ďg���܂����I");
		}
		case(37)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "���������A���ׂ̈ɂ���ȂɃ��^������A�����Ă�Ǝv���Ă�񂾁H");
		}
		case(38)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�얲�Q�̃G���f�B���O�ł������Ă邾�낤�B[r]������b���������Ă��Ȃ����ƁB");
		}
		case(39)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�o��l�����S��b����c�������i�����鎖�͂�����Ɓw�񎦂���Ă���x");
		}
		case(40)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�ł��A�������炪����B[r]���������V��������l���Ɛl�œ��@�͒��낪�����́H");
		}
		case(41)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�����t���͉��ł킴�킴�����Ńv���f���[�X�����_���ׂ��悤�Ȑ^���������ł���܂����H");
		}
		case(42)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�����A���������������������ŏ��Ɛl�͓r���œ��ւ��Ȃ��Ƃ����Ȃ��Ǝv�����񂾂��B");
		}
		case(43)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "���������A�o��`�����I�����������獡�܂ł���Ȑ��������Ă������A");
		}
		case(44)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�~�X�e���[�̐����́A�{�������������̉\����r�����Ă����悤�ȕ��ł͂Ȃ��B");
		}
		case(45)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�������Ȃ����킹�čs���āA�Ɛl�̕`�����X�g�[���[��g�ݏグ�čs������ˁB");
		}
		case(46)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�ł͎��n��ɍ��킹�āA�����t���̍s���̗��R��T���Ă����ł���܂��I");
		}
		case(47)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�V�������ɂƂ��Ĉٕς��N���������b�g�͉����H");
		}
		case(48)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "��́A�����R�̂����ɂ��āA�ٕω����̎蕿�𗧂Ă鎖�B");
		}
		case(49)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "���������鎖���،��ŁA�ǂ���ʎ����v�������B");
		}
		case(50)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "���[�́A�ٕς̑O�B�F�̂ɖ��O��t���Ă�������̎����ȁB");
		}
		case(51)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�Y��̐_���v���f���[�X������A���̐M��h��ׂ����˂Ȃ��ٕς��N��������H");
		}
		case(52)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�������h��ׂ����Ƃ��Ă鑊�肪�A�����R��������H");
		}
		case(53)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�o�b�N�X�g�[���[�ł������Ă���ł���܂��ȁB");
		}
		case(54)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�����ĐM���㏑������ʂ悤�ɂƁB[r]�������āA�F�̂�t�i�������j���āA���q�Ɛ�킹�ĕ��������悤�Ƃ����̂ł���܂��I");
		}
		case(55)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�T���猩��΁A���q�͉䂪�R���v���f���[�X���悤�Ƃ��Ă���_�̐M�������ׂ̈ɒD�����Ƃ���Ɉ��l�B");
		}
		case(56)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "����𔒋e���|���Ĉٕς��������A�ߌ��̃q���C������������~���Ƃ����V�i���I����������󂾁B");
		}
		case(57)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "��������Z���������B[r]�V�������͎v��Ȃ������̂�ˁB�܂����A�g�F�̂���񂪏��Ȃ�āh");
		}
		case(58)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�������P�ɂāA�����R�̕M�����L���Ƃ����낤�҂���Ȃ��ƌ����Ă�ȁB[r]���O�͓��q�̎��͂�F�߂Ă����B");
		}
		case(59)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "������A�܂����F�̂ɕ�����Ȃ�čl�������ĂȂ������񂾁B");
		}
		case(60)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "���q�́A���ۂ����Ɛl�𐄗����邾���Ȃ�A���Ȃ�e�^�҂̐�͔����l���ł���܂��I");
		}
		case(61)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�������A�킴�킴����Ȑl����e�^�҂ɉ�����Ƃ������́A���@�𐄗������ł͏d�v�Ȑl���ł���Ƃ������Ȃ̂ł���܂��I");
		}
		case(62)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�얲�P�G���f�B���O�ɂāA�������P�l����ʐl�ɖ��f��������̂��D�܂Ȃ��ƌ����Ă���ȁB");
		}
		case(63)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "����Ŕ��e�͍������󂾁B[r]�Ɛl�ɂ���͂��̐l�����A�ٕς��N�����Ȃ��󋵂ɂȂ��Ă��܂����B");
		}
		case(64)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�����œ��ւ���ˁB[r]�g�Ɛl���h�ł͂Ȃ��A�g�����Ɛl�Ɏd���ďグ�������h�Ƃ������@���B");
		}
		case(65)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "���@���g���v�h����A�g�ېg�h�ɕς�����u�Ԃł���܂��ȁI");
		}
		case(66)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "�������āA��ނ������F�̂�|���č߂����ĖႨ���Ƃ�����ł���܂��I");
		}
		case(67)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[3]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�����������ł܂���Z���������B[r]���炭�{���͂���őS�ĉ����̂͂��������񂾁B");
		}
		case(68)
		{
			ObjPrim_SetTexture(cutinPlayer1, pathPlayer1[2]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer1, "�������P�ɂāA���q�͔��e�ɁA�얲�Ƌ��ɊF�̂𓢔��������������ĂȂ��B");
		}
		case(69)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�������Q�ł͂��O���ł������낤�ȁB[r]������A���ɒN���ٕς̔Ɛl�Ɏd���ďグ���Ȃ��Ȃ����̂�����B");
		}
		case(70)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "����ȍ~�͎���L�떳��ɂ��Č떂�������Ƃ��Ă��悤�����A���ʂ͂��ꂾ�B");
		}
		case(71)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "����ȁc�����ł��c");
		}
		case(72)
		{
			ObjPrim_SetTexture(cutinBoss1, pathBoss1[4]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss1, "�~�i�܂ł͂��Ȃ����ǁA�ꎞ�K���𔍒D�B�V�l���C���󂯂Ĕ��Ȃ��ĂˁB");
		}
		case(73)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "���x�����A�H��͓���낤�B[r]���O�����e�̎w�����ɂȂ�Ȃ����B");
		}
		case(74)
		{
			ObjPrim_SetTexture(cutinBoss2, pathBoss2[1]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss2, "�d���̕s����������������ȁB�l�����ɂ����i�̐i�������Ă������B");
		}
		case(75)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "���h�ł���܂��I");
		}
		case(76)
		{
			ObjPrim_SetTexture(cutinPlayer2, pathPlayer2[5]);
			SetTalkEx_Umineko(cutinDescri, cutinPlayer2, "��A���ɂ���ĉH��ł����I�H");
		}
		case(77)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "���`�H���ł���܂������`�H[r]�㊯�ɑ΂��Ă��̌�̗�����͂��`�I");
		}
		case(78)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[3]);
			SetTalkEx_Umineko(cutinDescri, cutinBoss3, "���ꂩ�炽���Ղ�������Ă�����ł���܂���I[r]�V�������I");
		}
		case(79)
		{
			ObjPrim_SetTexture(cutinBoss3, pathBoss3[2]);
			SetTalkEx_Umineko(cutinDescri, -1, "�H��́A���e���K�������߂�����̎����l���Ă���̂��낤���H");
		}
		case(80)
		{
			SetTalkEx_Umineko(cutinDescri, -1, "�������́A�����͌��͂ɓM��Đg��S�ڂ��^�C�v���Ȃƒ��������B");
		}
		case(81)
		{
			SetTalkEx_Umineko(cutinDescri, -1, "�����āA��x�Ƃ���ȏX�����͑����Ɋ������܂��̂͌�Ƃ��Ǝv���������ł������B");
		}
		others
		{
			return(0);
		}
		return(talk_type);
	}
}


//�J�ڂ��ւ���
task Swich_Talk02B()
{
	//�����_�����O�^�[�Q�b�g�Ɏg�p����e�N�X�`��
	let renderTexture = GetReservedRenderTargetName(0);
	RenderToTextureA1(renderTexture, 0, 100, true);

	//--------------------------------
	let objImg = ObjPrim_Create(OBJ_SPRITE_2D); //2D�X�v���C�g�I�u�W�F�N�g����
	ObjPrim_SetTexture(objImg, renderTexture); //�e�N�X�`����ݒ�
	ObjSprite2D_SetSourceRect(objImg, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(objImg, 0, 0, GetScreenWidth, GetScreenHeight);
	Obj_SetRenderPriorityI(objImg, 100);

	//�䂪�݃I�u�W�F�N�g�ɃV�F�[�_��ݒ�
	ObjShader_SetShaderF(objImg, hlslNoise);
	ObjShader_SetTechnique(objImg, "TecNoise");

	let t = 0;
	loop(30)
	{
		//�V�F�[�_�Ƀp�����[�^��ݒ�
		let power = t/30;
		ObjShader_SetFloat(objImg, "seed_", t);
		ObjShader_SetFloat(objImg, "power_", power);	// power���c�ݗ�(%)
		t++;
		yield;
	}

	// �g���������
	SetAreaCommonData(CAREA_SYSTEM, "StgWorldBreak", true );
	SetStgFrame(0, 0, GetScreenWidth, GetScreenHeight, 20, 80);

	ascent(i in 0 .. 120)
	{
		//�V�F�[�_�Ƀp�����[�^��ݒ�
		let power = 1 - i/120;
		ObjShader_SetFloat(objImg, "seed_", t);
		ObjShader_SetFloat(objImg, "power_", power);	// power���c�ݗ�(%)
		ObjRender_SetAlpha(objImg, 255 * (1-i/60));
		t++;
		yield;
	}
	Obj_Delete(objImg);
	ClearInvalidRenderPriority();
}



// --- �ȉ��͒n�̕��p�̉�b�g

let baseWidth_Umi = GetScreenWidth;
let baseHeight_Umi = 128;
let baseX_Umi = 64;
let baseY_Umi = GetScreenHeight -16;

let baseTextX_Umi = baseX_Umi+32;
let baseTextY_Umi = baseY_Umi+10 - 96;


// ��b���b�Z�[�W�i�����o�������@�\���j
function SetTalkEx_Umineko_Red(objDes, objCutin, text, red_text)
{
	_SetTalkEx_Umineko(objDes, objCutin, text);
	Obj_SetValue(objDes, "TEXT_RED", red_text);
	
	// �X�y�[�X�ɒu��
	function GetSpaceText(text)
	{
		let result_text = "";
		let tmp_obj = ObjText_Create();
		ascent(i in 0 .. length(red_text))
		{
			ObjText_SetText(tmp_obj, red_text[i]);
			let tlen = ObjText_GetTextLength(tmp_obj);
			if (tlen == 1) { result_text = result_text ~ " "; }
			else if (tlen == 2) { result_text = result_text ~ "�@"; }
		}
		Obj_Delete(tmp_obj);
		return(result_text);
	}
}
function SetTalkEx_Umineko(objDes, objCutin, text)
{
	_SetTalkEx_Umineko(objDes, objCutin, text);
	Obj_SetValue(objDes, "TEXT_RED", "");
}
function _SetTalkEx_Umineko(objDes, objCutin, text)
{
	// ���O�擾
	let e_name = "";
	if (!Obj_IsDeleted(objCutin)) { e_name = Obj_GetValueD(objCutin, "BOSS_NAME", ""); }
	// �����o�����Z�b�g
	SetFukidashiType(objDes, FUKIDASHI_NORMAL);
	// �����o���폜
	DeleteAllFukidashi();
	// �J�b�g�C�����B��
	HideAllCutin();
	// ��b
	_SetTalk(objDes, text, 0, 0);
	// ���O�Z�b�g
	Obj_SetValue(objDes, "NAME", e_name);
	// �J�b�g�C����O�ʂɏo��
	if (!Obj_IsDeleted(objCutin))
	{
		ChangeImageFoward(objCutin);
		SetImageVisible(objCutin, true);
	}
}

// �J�b�g�C�����B��
function HideAllCutin()
{
	ascent(i in 0 .. length(objTalkObject))
	{
		SetImageVisible(objTalkObject[i], false);
	}
}

// �n�̕����o�������ꍇ�͂�����I
function CreateDescriptiveObject_Umineko()
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetValue(obj, "DES", true);		// �n�̕��t���O����
	Obj_SetValue(obj, "FW", false);
	ChangeDescriptive_Umineko(obj);
	objTalkObject = objTalkObject ~ [obj];	//�z��ɓo�^
	return(obj);
}


// �����o���ύX�Ď��i�n�̕��p�j
task ChangeDescriptive_Umineko(parent)
{
	let objFukidashi = -1;
	let objText = -1;
	let objTextRed = -1;
	
	let f_position = Obj_GetValueD(parent, "F_POSITION", 1);
	let before_tx = Obj_GetValueD(parent, "TEXT", "");
	let before_tn = Obj_GetValueD(parent, "NAME", "");
	while(!Obj_IsDeleted(parent))
	{
		if (Obj_GetValueD(parent, "NEXT", false))
		{
			let tx = Obj_GetValueD(parent, "TEXT", "");
			let tx_red = Obj_GetValueD(parent, "TEXT_RED", "");
			let tn = Obj_GetValueD(parent, "NAME", "");
			if (length(tx) > 0)
			{
				if (length(before_tx) > 0)
				{
					// �A����b���͐����o���ύX�`�F�b�N�̂�
					ChangeDescriptiveFrame_Umineko(objFukidashi, [0, 1][length(tn)>0]);
				}
				else
				{
					// �����o���폜���z�u
					if (objFukidashi != -1) { DeleteFukidashi(objFukidashi); }
					objFukidashi = _MakeDescriptiveFrame_Umineko(99);
					ChangeDescriptiveFrame_Umineko(objFukidashi, [0, 1][length(tn)>0]);
				}
				// �e�L�X�g�폜���z�u
				if (objText != -1) { DeleteFukidashi(objText); }
				if (objTextRed != -1) { DeleteFukidashi(objTextRed); }
				objText = _MakeDescriptiveText_Umineko(tx, 99, 0);
				objTextRed = _MakeDescriptiveText_Umineko(tx_red, 99, 1);
				// ���O������
				Obj_SetValue(objFukidashi, "NAME", tn);
			}
			else
			{
				if (objFukidashi != -1) { DeleteFukidashi(objFukidashi); }
				if (objText != -1) { DeleteFukidashi(objText); }
				if (objTextRed != -1) { DeleteFukidashi(objTextRed); }
			}
			Obj_SetValue(parent, "TEXT", "");
			Obj_SetValue(parent, "TEXT_RED", "");
			Obj_SetValue(parent, "NEXT", false);
			before_tx = tx;
			before_tn = tn;
		}
		yield;
	}
	if (objFukidashi != -1) { DeleteFukidashi(objFukidashi); }
	if (objText != -1) { DeleteFukidashi(objText); }
}

// �����o����ݒu����i�����j
function _MakeDescriptiveText_Umineko(text, t_priority, t_type)
{
	// �e�L�X�g����I
	let objText = DesText(t_priority);
	ObjText_SetText(objText, text);
	ObjText_SetTransCenter(objText, 0, baseHeight_Umi-48);
	ObjRender_SetPosition(objText, baseTextX_Umi, baseTextY_Umi, 0);
	if (t_type)
	{
		ObjText_SetFontBorderColor(objText, 0, 0, 0);
		ObjRender_SetColor(objText, 255, 0, 0);
		ObjText_SetFontBold(objText, true);
	}
	
	DescriptiveMotion(objText);
	return(objText);
	
	task DescriptiveMotion(objText)
	{
		ascent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objText, tmp);
			yield;
		}
		while(!Obj_IsDeleted(objText))
		{
			if (Obj_GetValueD(objText, "DELETED", false)) { break; }
			yield;
		}
		descent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objText, tmp);
			yield;
		}
		Obj_Delete(objText);
	}
}

function DesText(t_priority)
{
	let objText = ObjText_Create();
	Obj_SetRenderPriorityI(objText, t_priority);
	ObjText_SetFontType(objText, baseFont);
	ObjText_SetFontSize(objText, baseFontSize);
	ObjText_SetFontBold(objText, false);
	ObjText_SetLinePitch(objText, baseFontLinePitch);
	ObjText_SetMaxWidth(objText, baseWidth_Umi-96-80);
	ObjText_SetFontBorderWidth(objText, 1);
	ObjText_SetFontBorderColor(objText, 64, 64, 64);
	ObjText_SetFontBorderType(objText, BORDER_SHADOW);
	
	ObjText_SetAutoTransCenter(objText, false);
	ObjRender_SetColor(objText, 255, 255, 255);
	return(objText);
}

// �����o����ݒu����i�t���[�������O�j
function _MakeDescriptiveFrame_Umineko(t_priority)
{
	//�����o���Z�b�g
	let objFukidashi = MakeDescriptiveObj_Umineko(0);
	Obj_SetRenderPriorityI(objFukidashi, t_priority);
	ObjRender_SetPosition(objFukidashi, baseX_Umi, baseY_Umi, 0);
	
	// ���O�I
	let objName = DesText(t_priority);
	ObjText_SetTransCenter(objName, 0, baseHeight_Umi+36);
	ObjRender_SetPosition(objName, baseTextX_Umi+8, baseTextY_Umi-36, 0);
	ObjRender_SetColor(objName, 255, 255, 128);
	
	DescriptiveMotion(objFukidashi, objName);
	return(objFukidashi);
	
	task DescriptiveMotion(objFukidashi, objName)
	{
		ascent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objFukidashi, tmp);
			ObjRender_SetScaleY(objName, tmp);
			ObjText_SetText(objName, Obj_GetValueD(objFukidashi, "NAME", ""));
			yield;
		}
		while(!Obj_IsDeleted(objFukidashi))
		{
			if (Obj_GetValueD(objFukidashi, "DELETED", false)) { break; }
			ObjText_SetText(objName, Obj_GetValueD(objFukidashi, "NAME", ""));
			yield;
		}
		descent(i in 0 .. 10)
		{
			let tmp = (i+1)/10;
			ObjRender_SetScaleY(objFukidashi, tmp);
			ObjRender_SetScaleY(objName, tmp);
			ObjText_SetText(objName, Obj_GetValueD(objFukidashi, "NAME", ""));
			yield;
		}
		Obj_Delete(objFukidashi);
		Obj_Delete(objName);
	}
}
function ChangeDescriptiveFrame_Umineko(obj, e_type)
{
	ObjSprite2D_SetSourceRect(obj, 0, 128*e_type, 512, 128*(e_type+1));
}

//�����o���I�u�W�F�N�g�쐬
function MakeDescriptiveObj_Umineko(e_type)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, imgEffectTFrame2);
	ObjSprite2D_SetSourceRect(obj, 0, 128*e_type, 512, 128*(e_type+1));
	ObjSprite2D_SetDestRect(obj, 0, -128, 512, 0);
	ObjRender_SetAlpha(obj, 192);
	return (obj);
}
